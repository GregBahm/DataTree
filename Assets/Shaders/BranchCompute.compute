#pragma kernel ComputeFinalPositions
#pragma kernel ComputeSiblingPressure
#pragma kernel ComputeChildrenPositions

#define IntDRes 1000 // We need to use "InterlockedAdd" to avoid racing conditions. But InterlockAdd only takes ints. So we multiply floats by this amount and then divide them back to get around the issue.

struct FixedBranchData
{
    int ParentIndex;
    int ImmediateChildenCount;
	int BranchLevel;
	float LevelOffset;
	float BranchParameter;
    int Scale;
    float2 AvatarUvOffset;
};
struct VariableBranchData
{
    float2 Pos;
    int2 CurrentSiblingPressure;
    int2 ChildrenPositionSums;
    float Locked;
};
struct SiblingPair
{
	int SelfIndex;
	int SiblingIndex;
};

RWStructuredBuffer<VariableBranchData> _VariableDataBuffer;
StructuredBuffer<FixedBranchData> _FixedDataBuffer;
StructuredBuffer<SiblingPair> _SiblingPairsBuffer;

float _DrawPower; 
float _RepelDist;
float _RepelPower;

float3 _ControllerPos;
float _ControllerRadius;

float _BranchHeight;

bool _ControllerLocks;
bool _ClearLocks;
float3 _ControllerDelta;

float2 DrawToParent(float2 pos, float2 parentPos)
{
	return lerp(pos, parentPos, _DrawPower);
}

float2 DrawToChildren(float2 pos, int2 childrenPosSum, int childrenCount)
{
    float2 actualChildrenPosSum = (float2)childrenPosSum / IntDRes;
    float2 averageChildrenPos = actualChildrenPosSum / childrenCount;
    return lerp(pos, averageChildrenPos, _DrawPower);
}

float3 GetThreeDeePos(float2 xzPos, int level, float levelOffset)
{
    float yPos = level * _BranchHeight + levelOffset * _BranchHeight;
    return float3(xzPos.x, yPos, xzPos.y);
}

[numthreads(128, 1, 1)]
void ComputeFinalPositions(uint3 id : SV_DispatchThreadID)
{
	VariableBranchData variableData = _VariableDataBuffer[id.x];
    FixedBranchData fixedData = _FixedDataBuffer[id.x];
	VariableBranchData parentData = _VariableDataBuffer[fixedData.ParentIndex];

    if (_ControllerLocks && !variableData.Locked)
    {
        float3 currentPos = GetThreeDeePos(variableData.Pos, fixedData.BranchLevel, fixedData.BranchParameter);
        bool withinControllerRadius = length(_ControllerPos - currentPos) < _ControllerRadius;
        variableData.Locked = withinControllerRadius;
    }
    
    if (_ClearLocks)
    {
        variableData.Locked = 0;
    }
    
    if(variableData.Locked)
    {
        variableData.Pos += _ControllerDelta.xz;
    }
    else
    {
        float2 newPos = variableData.Pos;
        newPos += (float2) variableData.CurrentSiblingPressure / IntDRes;
        newPos = DrawToParent(newPos, parentData.Pos);
        if (id.x != 0 && fixedData.ImmediateChildenCount > 0)
        {
            newPos = DrawToChildren(newPos, variableData.ChildrenPositionSums, fixedData.ImmediateChildenCount);
        }

        variableData.Pos = newPos;
    }
    
    variableData.CurrentSiblingPressure = float2(0, 0);
    variableData.ChildrenPositionSums = float2(0, 0);
	_VariableDataBuffer[id.x] = variableData;
}


[numthreads(128, 1, 1)]
void ComputeChildrenPositions(uint3 id : SV_DispatchThreadID)
{
    FixedBranchData fixedData = _FixedDataBuffer[id.x];
    VariableBranchData variableData = _VariableDataBuffer[id.x];
    int posX = variableData.Pos.x * IntDRes;
    int posY = variableData.Pos.y * IntDRes;
    InterlockedAdd(_VariableDataBuffer[fixedData.ParentIndex].ChildrenPositionSums.x, posX);
    InterlockedAdd(_VariableDataBuffer[fixedData.ParentIndex].ChildrenPositionSums.y, posY);
}

float2 GetSiblingPressure(float2 self, float2 sibling)
{
	float2 diff = self - sibling;
	float dist = length(diff);
	float2 normalized = normalize(diff);
	float power = max(0, _RepelDist - dist) / _RepelDist;
	return normalized * power * _RepelPower;
}

[numthreads(128, 1, 1)]
void ComputeSiblingPressure(uint3 id : SV_DispatchThreadID)
{
	SiblingPair myPair = _SiblingPairsBuffer[id.x];
	if (myPair.SelfIndex != 0)
	{
		VariableBranchData selfData = _VariableDataBuffer[myPair.SelfIndex];
		VariableBranchData siblingData = _VariableDataBuffer[myPair.SiblingIndex];
		float2 selfPosition = selfData.Pos;
		float2 siblingPosition = siblingData.Pos;

		int2 newSiblingPressure = GetSiblingPressure(selfPosition, siblingPosition) * IntDRes;

		InterlockedAdd(_VariableDataBuffer[myPair.SelfIndex].CurrentSiblingPressure.x, newSiblingPressure.x);
		InterlockedAdd(_VariableDataBuffer[myPair.SelfIndex].CurrentSiblingPressure.y, newSiblingPressure.y);
		InterlockedAdd(_VariableDataBuffer[myPair.SiblingIndex].CurrentSiblingPressure.x, -newSiblingPressure.x);
		InterlockedAdd(_VariableDataBuffer[myPair.SiblingIndex].CurrentSiblingPressure.y, -newSiblingPressure.y);
	}
}
